// Copied from Inflector
function convertParsingObjectToFormsArray(parsingObject) {
	if (!parsingObject) {
		console.warn(
			`parsingObject is ${parsingObject} in convertParsingObjectToFormsArray`,
		);
		return [];
	}
	if (Array.isArray(parsingObject)) {
		return parsingObject;
	}
	if (typeof parsingObject === 'string') {
		console.warn(`parsingObject is a string: ${parsingObject}`);
	}
	return (
		Object.entries(parsingObject)
			// .filter(object => object !== null && object !== undefined)
			.flatMap(([key, object]) => {
				// Exclude forms that the Inflector marked as incorrect.
				if (key === 'incorrect') {
					return [];
				}
				return convertParsingObjectToFormsArray(object);
			})
	);
}
function convertParsingObjectToFormsSet(parsingObject) {
	return new Set(convertParsingObjectToFormsArray(parsingObject));
}

function getFormsForOneLemma(lemmaObject) {
	const formsSet = convertParsingObjectToFormsSet(lemmaObject.Forms);
	const formsWithLemma = [];
	formsSet.forEach((form) => {
		formsWithLemma.push({ form: form, lemma: lemmaObject.Lemma });
	});
	return formsWithLemma;
}

function getFormsForSeveralLemmata(lemmaObjects) {
	const formsObject = {};
	lemmaObjects.forEach((lemmaObject) => {
		const forms = getFormsForOneLemma(lemmaObject);
		forms.forEach((formAndLemma) => {
			if (formsObject[formAndLemma.form]) {
				// console.log(`formsObject already has ${formAndLemma.}`)
				formsObject[formAndLemma.form].push(formAndLemma.lemma);
			} else {
				formsObject[formAndLemma.form] = [formAndLemma.lemma];
			}
		});
	});
	return formsObject;
}

function convertToText(outputAsObject) {
	let output = '';
	Object.entries(outputAsObject).forEach(([word, lemmata]) => {
		// console.log({ word, lemmata });
		const newLineOfOutput = `${word}	${lemmata.join(' ')}\n`;
		output = output + newLineOfOutput;
	});
	return output;
}

////
//// Code that only runs in Node:
////

if (typeof require !== 'undefined') {
	const fs = require('fs');

	function runAllWords() {
		//// This file is generated by the Inflector by merging my source lemmata data with the inflected forms that the Inflector generates for each lemma.
		const inputFileUrl =
			'C:/Users/Duncan Ritchie/Documents/Code/velut/velutSideAssets/Json/lemmata-with-words-from-inflector_mongo.json';
		const outputFileUrl =
			'C:/Users/Duncan Ritchie/Documents/Code/velut/velutSideAssets/Json/output-from-lemmata-collator.txt';

		try {
			console.time('total');
			console.time('reading input');

			const inputFile = fs.readFileSync(inputFileUrl, 'utf-8');
			const inputLines = inputFile.split('\n').filter(Boolean);
			const inputLemmata = inputLines.map((line, index) => {
				if (!line) {
					console.error(`Line ${index} is ${line}`);
					return;
				}
				// console.log(line);
				return JSON.parse(line);
			});

			console.timeEnd('reading input');
			console.time('getting forms');

			const outputAsObject = getFormsForSeveralLemmata(inputLemmata);

			console.timeEnd('getting forms');
			console.time('writing text file');

			const output = convertToText(outputAsObject);
			fs.writeFileSync(outputFileUrl, output);

			console.timeEnd('writing text file');
			console.timeEnd('total');
		} catch (error) {
			console.error(error);
		}
	}

	runAllWords();
}
